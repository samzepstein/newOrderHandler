// The new order handler finds existing quotes whose names match the Quote string on a new order 
// imported from our EDI provider. 
// The findQuote and findRep methods are called from a before insert trigger. The methods look for 
// matching quotes and parter reps respectively. If a matching partner rep is not found the newRep 
// method is called from an after insert trigger and the new contact record is created.
// 
// If we change to six-digit quote numbers, we will have to change line 35. 
// Quotes generated in the test environment have one more digit than production numbers.
public class newOrderHandler{
    public static void findQuote(List<Order> orders){
        for (Order o : orders){
            
            // Look for duplicate PO numbers on orders
            List<Order>queryOrder = [SELECT id, OrderNumber, PoNumber, TotalAmount
                                     FROM Order
                                     WHERE PoNumber = :o.PoNumber];
            
            if(queryOrder.size() > 0 && o.PoNumber != null){
                String errSub0 = 'Duplicate Order Found';
                String errBod0 = errSub0 +' for PO ' + o.PoNumber + 
                    ' <http://goguardian.my.salesforce.com/' + queryorder[0].id +'>';
                o.status='Canceled';
                o.Description = errBod0;
                errorHandler(o, True, errSub0, errBod0);
                continue;
            }
            
            String quoteStr = o.Quote__c;
            if(quoteStr == Null){
                String errSub0 = 'Please reply with valid quote number';
                String errMsg0 = 'Purchase Order number '+o.PoNumber+' is missing a quote reference number.\n'+
                    'Please reply with a valid quote reference number.';
                errorhandler(o,False,errSub0,errMsg0);
            }
            
            else{
                System.debug('quoteStr: ' + quoteStr);
                // Parse the quote number from the Quote number string
                try{
                    Integer ind = quoteStr.indexOf('Q-');
                    
                    if(ind == -1){
                        Integer pLInd = quoteStr.indexOf('PL-');
                        if(pLind != -1){
                            System.debug('Pricing Letter: '+quoteStr);
                        }
                        Integer indEnd = Test.isRunningTest() ? 9 : 8;
                        String prLetterNum = quoteStr.substring(pLInd,indEnd);
                        
                        Pricing_Letter__c prLetter = [SELECT Account__r.OwnerId FROM Pricing_Letter__c WHERE Name = :prLetterNum LIMIT 1];
                        
                        o.OwnerId = prLetter.Account__r.OwnerId;
                    }
                    
                    else{
                        
                        Integer indEnd = 8;
                        
                        String quoteNum = quoteStr.substring(ind, ind+indEnd);
                        
                        System.debug('quoteStr: ' + quoteStr);
                        
                        // Query for the quote Id with the quote number provided by the partner                
                        SBQQ__Quote__c quote = [SELECT Id, SBQQ__Opportunity2__c, Name 
                                                FROM SBQQ__Quote__c 
                                                WHERE Name = :quoteNum LIMIT 1];
                        
                        System.debug('queried quote: ' + quote);
                        
                        // Check for orders with the same quote number 
                        String queryStr = 'SELECT Id, PoNumber FROM Order WHERE Quote__c LIKE \'%'+quoteNum+'%\'';
                        
                        system.debug(queryStr);
                        
                        List<Order> dupeOrder = Database.query(queryStr);
                        
                        system.debug('dupeOrder: '+dupeOrder);
                        if(dupeOrder.size() > 0){
                            String errSub1 = 'Please reply with valid quote number';
                            String errMsg1 = 'An order already exists for GoGuardian Quote ' + quoteNum + 
                                ' with PO Number ' + dupeOrder[0].PoNumber +'.\nPlease reply to this '+
                                'email with a valid quote number for PO '+ o.PoNumber +'.';
                            errorhandler(o,False,errSub1,errMsg1);
                            continue;
                        }
                        
                        // If the query returns null then this assignment will trigger the catch
                        o.SBQQ__Quote__c = quote.Id;
                        o.OpportunityId = quote.SBQQ__Opportunity2__c;
                        
                        o.Running_Intacct_Sync__c = TRUE;
                        
                        
                        
                        
                        
                        
                        System.debug('End of try segment');
                        
                        
                    }
                    
                    //validate schedule apex to sync order to intacct sales invoice
                    triggerScheduleApex();
                }
                
                // If there is no 'Q-' or if the quote can't be found, this catch handles error
                catch(Exception err){
                    String errSub2 = 'Please reply with valid quote number';
                    String errMsg2 = 'A GoGuardian quote was not found for PO# '+ o.PoNumber + ' with quote # ' +
                        quoteStr + '.\nPlease reply to this email with a valid quote number.';
                    errorhandler(o,False,errSub2,errMsg2);
                    
                }
                
                
                //run method to check order to match quote lines to create sales invoice in Intacct
                //query for orders that have true boolean field
                //checkOrderMatch(o);
                //
                //
            }
        }
    }
    
    
    public static void findRep(List<Order> orders){       
        for (Order o : orders){
            if(o.PartnerRep_Email__c != null){
                
                //Search contacts for an existing contact
                List<Contact> rep = [SELECT Id, Name 
                                     FROM Contact 
                                     WHERE Email = :o.PartnerRep_Email__c LIMIT 1];
                if (rep.size()==1){
                    o.Partner_Rep__c = rep[0].Id;
                }
            }
            if(o.Drop_Ship_Email__c != null){
                
                //Search contacts for an existing contact
                List<Contact> dsCont = [SELECT Id, Name 
                                        FROM Contact 
                                        WHERE Email = :o.Drop_Ship_Email__c LIMIT 1];
                if (dsCont.size()==1){
                    o.Drop_Ship_Contact__c = dsCont[0].Id;
                }
            }
        }
    }
    
    public static void newRep(List<Order> orders){
        
        for (Order o : orders){
            if (o.Partner_Rep__c == null && o.PartnerRep_Email__c != null && o.PartnerRep_Name__c != null){
                
                String[] name = o.PartnerRep_Name__c.split(' ');
                Contact addContact = new Contact(FirstName = name[0], 
                                                 LastName = name[name.size()-1], 
                                                 Email = o.PartnerRep_Email__c);
                
                if (o.Reseller_from_Quote__c != null){
                    addContact.AccountId = o.Reseller_from_Quote__c;
                }
                
                try{
                    insert addContact;
                    Order ord = [SELECT Id FROM Order WHERE Id = :o.Id LIMIT 1];
                    ord.Partner_Rep__c = addContact.Id;
                    update ord;
                }
                catch(Exception e){
                    String sub3 = 'Exception Thrown - Adding Partner Contact';
                    String body3 = 'Exception thrown adding partner contact to Order with Id ' + o.Id;
                    errorHandler(o,True,sub3,body3);
                }
            }
            if (o.Drop_Ship_Contact__c == null && o.Drop_Ship_Name__c != null && o.Drop_Ship_Email__c != null){
                String[] name = o.Drop_Ship_Name__c.split(' ');
                Contact addContact = new Contact(FirstName = name[0], 
                                                 LastName = name[name.size()-1], 
                                                 Email = o.Drop_Ship_Email__c);
                
                if (o.Reseller_from_Quote__c != null){
                    addContact.AccountId = o.Reseller_from_Quote__c;
                }
                
                try{
                    insert addContact;
                    Order ord = [SELECT Id FROM Order WHERE Id = :o.Id LIMIT 1];
                    ord.Drop_Ship_Contact__c = addContact.Id;
                    update ord;
                }
                catch(Exception e){
                    String sub4 = 'Exception Thrown - Adding Partner Contact';
                    String body4 = 'Exception thrown adding partner contact to Order with Id ' + o.Id + 'Message: ' + e.getMessage() + 'Stack Trace: ' + e.getStackTraceString();
                    errorHandler(o,True,sub4,body4);
                }
            }
        }        
    }
    
    public static void errorHandler(Order o, Boolean isInternal, String sub, String body){
        
        List<String> errorEmailList = new List<String>{'salesops@goguardian.com'};
            Messaging.SingleEmailMessage msg = new Messaging.SingleEmailMessage();
        if (isInternal == False && Test.isRunningTest() == False){
            errorEmailList.add('reseller@goguardian.com');
            /*
if (o.AccountId == '0014100000BCpaG'){
body = 'Attn: ' + (o.Drop_Ship_Name__c == Null ? '' : o.Drop_Ship_Name__c) + 
',\n\n' + body + '\n\n GoGuardian Sales Operations';                
if (o.Drop_Ship_Email__c != null){
errorEmailList.add(o.Drop_Ship_Email__c);
}
}

if (o.AccountId == '0014100000BD9op'){
errorEmailList.add('terrica@synnex.com');
body = 'Attn: Terri Carter,\n\n' + body + '\n\n GoGuardian Sales Operations'; 
}
*/
        }
        
        msg.setSubject(sub);
        msg.setToAddresses(errorEmailList);
        msg.setPlainTextBody(body);
        Messaging.sendEmail(new List<Messaging.SingleEmailMessage> { msg }, false);
    }
    
    public static void sendOverdueReminder(){
        List<AggregateResult> overdue = [SELECT Owner.FirstName, Owner.Email, COUNT(Id) 
                                         FROM Order 
                                         WHERE Ready_to_Invoice__c = FALSE 
                                         AND Invoiced__c = FALSE
                                         AND Status != 'Canceled'
                                         //AND Owner.Email != 'salesops@goguardian.com'
                                         GROUP BY Owner.FirstName, Owner.Email];
        
        System.debug('Overdue: '+overdue);
        
        if(overdue.size() > 0){
            List<String> toAddrs = new List<String>();
            String managers = '';
            if(Test.isRunningTest()){
                managers = 'bobbie,lucille';
            }
            else{
                Overdue_Order_Email_Setting__mdt oes = [SELECT Manager_Email__c FROM Overdue_Order_Email_Setting__mdt WHERE Label = 'Default' LIMIT 1];
                managers = oes.Manager_Email__c;
            }   
            
            for(String name : managers.split(',')){
                toAddrs.add(name + '@goguardian.com');
            }
            
            for(AggregateResult od : overdue){
                if(od.get('Email') != Null){
                    toAddrs.add((String) od.get('Email'));
                }
            }
            
            String emailBody = 'You are receiving this email because there is at least one overdue order in your name: \n\n';
            for(AggregateResult od : overdue){
                String first = (String) od.get('FirstName');
                Integer	num = (Integer) od.get('expr0');
                if(first != Null){
                    emailBody += first + '   ' + String.valueOf(num) + ' order';
                    
                    if(num > 1){
                        emailBody += 's\n';
                    }
                    else{
                        emailBody += '\n';
                    }
                }
            }
            emailBody += '\n' + 'Orders can be viewed on the Overdue Orders report: ' +
                'https://goguardian.lightning.force.com/lightning/r/Report/00O41000008cM18EAE/view?queryScope=userFolders' + '\n';
            
            
            
            Messaging.SingleEmailMessage msg = new Messaging.SingleEmailMessage();
            msg.setSubject('ACTION NEEDED: There are overdue orders in your name.');
            msg.setToAddresses(toAddrs);
            msg.setPlainTextBody(emailBody);
            
            Messaging.sendEmail(new List<Messaging.SingleEmailMessage> { msg }, false);
        }
    }
    
    
    public static void oppReferenceChanged(List<Order> oldOrderList){
        
        List<ID> oldOrderOppList = new List<ID>();
        
        for(Order oldOrder : oldOrderList){
            
            oldOrderOppList.add(oldOrder.OpportunityId);
            
        }
        
        system.debug('oldOrderOppList: '+ oldOrderOppList);
        
        List<Order> matchingOrders = [Select Id, Name, PoNumber, OpportunityId FROM Order 
                                      Where OpportunityId IN :oldOrderOppList];
        
        system.debug('matchingOrders: ' + matchingOrders);
        
        Map<Id,List<Order>> oppOrderMap = new Map<Id,List<Order>>();
        
        
        for(Order o : matchingOrders){
            
            Id orderOppId = o.OpportunityId;
            
            List<Order> orderList = oppOrderMap.containsKey(orderOppId) ? oppOrderMap.get(orderOppId) : new List<Order>();
            
            orderList.add(o);
            
            oppOrderMap.put(orderOppId, orderList);
            
        }
        
        system.debug('oppOrderMap: ' + oppOrderMap);
        
        List<Opportunity> oppList = [Select Id, PO_number__c, Has_Order__c FROM Opportunity WHERE Id IN :oldOrderOppList];
        
        
        
        system.debug('oppList: ' + oppList);
        
        try{
            
            
            for(Opportunity opp : oppList){
                
                Id oppId = opp.id;
                
                system.debug('oppId: '+ oppId);
                
                List<Order> foundOrders = oppOrderMap.containsKey(oppId) ? oppOrderMap.get(oppId) : new List<Order>();
                
                system.debug('foundOrders: '+ foundOrders);
                
                If(foundOrders.size() == 1 ){
                    
                    opp.PO_number__c = foundOrders[0].PoNumber;
                    
                    system.debug('found another order');
                }
                
                If(foundOrders.size() > 1 ){
                    
                    List<String> orderUrls = new List<String>();
                    
                    for(Order o : foundOrders){
                        
                        orderUrls.add(o.Name + '\n' + 'https://goguardian.lightning.force.com/lightning/r/Lead/'+ o.Id+'/view\n\n');
                        
                    }
                    
                    //send email to salesops
                    String subject = 'Found Multiple Orders';
                    String body = 'Hey, ' + 
                        '\n\nWe found multiple orrders after an opp has been disacociated with an order.  '  +
                        '\n\nFor thhat reason, we did not uncheck the Has_Order__c field: '+
                        '\n\nOrder Urls:' + '\n' +
                        orderUrls +
                        '\n\nThanks!';
                    
                    String address = 'salesops@goguardian.com';
                    
                    sendEmail(subject, body, address);
                    
                }
                
                
                If(foundOrders.size() == 0 ){
                    
                    opp.Has_Order__c = FALSE;
                    opp.PO_number__c = '';
                    system.debug('yay!!');
                }
                
                
            }
            
            
            update oppList;
            
        }
        catch(Exception e){
            String sub4 = 'Exception Thrown - Error with oppReferenceChanged Method';
            String body4 = 'Exception thrown' + e.getMessage() + 'Stack Trace: ' + e.getStackTraceString();
            errorHandler(sub4,body4);
        }
        
        
        
    }
    
    
    
    
    
    
    
    
    
    public static void errorHandler(String sub, String body){
        
        List<String> errorEmailList = new List<String>{'salesops@goguardian.com'};
            Messaging.SingleEmailMessage msg = new Messaging.SingleEmailMessage();
        
        msg.setSubject(sub);
        msg.setToAddresses(errorEmailList);
        msg.setPlainTextBody(body);
        Messaging.sendEmail(new List<Messaging.SingleEmailMessage> { msg }, false);
        
    }
    
    public static void sendEmail(String subject, String body, String address){
        
        List<String> emailList = new List<String>{address};
            Messaging.SingleEmailMessage msg = new Messaging.SingleEmailMessage();
        
        msg.setSubject(subject);
        msg.setToAddresses(emailList);
        msg.setPlainTextBody(body);
        Messaging.sendEmail(new List<Messaging.SingleEmailMessage> { msg }, false);
        
        
        
        
        
    }
    
    public static void triggerScheduleApex(){
        
        Integer MAX_SCHEDULED_JOBS	= 100;
        
        List<CronTrigger> GetScheduledJobs =  [select Id, NextFireTime 
                                               from CronTrigger 
                                               where State in ('WAITING','ACQUIRED','EXECUTING')
                                               or NextFireTime != NULL];
        
        system.debug('GetScheduledJobs: '+ GetScheduledJobs);
        
        system.debug('GetScheduledJobs.size(): '+ GetScheduledJobs.size());
        
        //can only have 100 scheduled Apex jobs at one time 
        If(GetScheduledJobs.size() >= MAX_SCHEDULED_JOBS){
            
            system.debug('Over 100 MAX Scheduled Job Size');
            
        }
        
        Else{
            
            // Build a CRON Expression corresponding to 5 minutes from now
            Datetime executeTime = (System.now()).addSeconds(300);
            String getCRONExpression = '' + executeTime.second() + ' ' + executeTime.minute() + ' ' + executeTime.hour() + ' ' + executeTime.day() + ' ' + executeTime.month() + ' ? ' + executeTime.year();
            
            
            //Long cronExpression = executeTime.getTime();
            
            string timeInterval = '0 1 * * * ?';
            
            
            System.debug('***getCRONExpression: ' + getCRONExpression);
            
            // Instantiate a new Scheduled Apex class
            orderMatchIntacct scheduledJob = new orderMatchIntacct();
            
            // Schedule our class to run at our given execute time, 
            // naming executeTime so that the the Schedule name will be Unique  
            System.schedule('orderMatchIntacct' + ' ' + timeInterval, timeInterval, scheduledJob);
            
            system.debug('orderMatchIntacct scheduled in 5 minutes!');
            
            
            
            
        }
        
        
        
        
        
    }
    
    
    
    
    
}
